rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
      match /users/{userId} {
        allow read: if true;
        allow create: if validUser(userId);
        allow update: if validUserUpdate(userId);
      }

      function validUser(userId) {
        let resourceValidate = (request.auth.uid == userId) && request.resource.data.keys().hasOnly(['username']);
        let batchValidate = existsAfter(/databases/$(database)/documents/usernames/$(request.resource.data.username));
        return resourceValidate && batchValidate;
      }

      function validUserUpdate(userId) {
        let avatar = request.resource.data.get('avatar', []);
        let avatarSize = 50;
        return request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bio', 'avatar']) && request.resource.data.get('bio', '') is string && avatar is list && (avatar.size() == 0 || avatar.size() <= (avatarSize * avatarSize * 4 + 50));
      }

      match /usernames/{username} {
        allow read: if true;
        allow create: if validName(username);
      }

      function validName(username) {
        let resourceValidate = (request.auth.uid == request.resource.data.uid) && request.resource.data.keys().hasOnly(['uid']) && username.matches('[A-Za-z0-9_]{3,24}') && (username == username.lower()); 
        let batchValidate = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        return resourceValidate && batchValidate;
      }

      match /users/{userId}/followers/{id} {
        allow read: if true;
        allow create: if validFollower(userId, id);
        allow delete: if validFollowerDelete(userId, id);
      }

      function validFollower(userId, id) {
        let resourceValidate = (request.auth.uid == id) && request.resource.data.keys().hasOnly(['time']) && request.resource.data.time is timestamp;
        let batchValidate = exists(/databases/$(database)/documents/users/$(id)) && existsAfter(/databases/$(database)/documents/users/$(id)/following/$(userId));
        return resourceValidate && batchValidate; 
      }

      function validFollowerDelete(userId, id) {
        let resourceValidate = (request.auth.uid == id);
        let batchValidate = exists(/databases/$(database)/documents/users/$(id)/following/$(userId)) && !existsAfter(/databases/$(database)/documents/users/$(id)/following/$(userId));
        return resourceValidate && batchValidate;
      }

      match /users/{userId}/following/{id} {
        allow read: if true;
        allow create: if validFollowing(userId, id);
        allow delete: if validFollowingDelete(userId, id)
      }

      function validFollowing(userId, id) {
        let resourceValidate = (request.auth.uid == userId) && request.resource.data.keys().hasOnly(['time']) && request.resource.data.time is timestamp;
        let batchValidate = exists(/databases/$(database)/documents/users/$(id)) && existsAfter(/databases/$(database)/documents/users/$(id)/followers/$(userId));
        return resourceValidate && batchValidate;
      }

      function validFollowingDelete(userId, id) {
        let resourceValidate = request.auth.uid == userId;
        let batchValidate = exists(/databases/$(database)/documents/users/$(id)/followers/$(userId)) && !existsAfter(/databases/$(database)/documents/users/$(id)/followers/$(userId));
        return resourceValidate && batchValidate;        
      }
  }
}